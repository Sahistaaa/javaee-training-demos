/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2022-07-01 05:40:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("kbd {\r\n");
      out.write("\tborder-radius: 2px;\r\n");
      out.write("\tpadding: 2px;\r\n");
      out.write("\tborder: 1px solid black;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body\r\n");
      out.write("\tstyle='font-family: arial; font-size: small; border-style: groove hidden ridge; p adding: 5px 5px'>\r\n");
      out.write("\t</br> Hello Maven 3 + Tomcat 10 Project!\r\n");
      out.write("\t</br>\r\n");
      out.write("\t</br> pom.xml of the tomcat7-maven-plugin depends on Tomcat's bundles.\r\n");
      out.write("\t</br> Maven download them and the plugin starts an embedded Tomcat instance\r\n");
      out.write("\twith the webproject.\r\n");
      out.write("\t</br> <strong>Below command prints the configuration: <mark>mvn -X tomcat7:run</mark></strong>\r\n");
      out.write("\t</br>\r\n");
      out.write("\t</br> Some interesting parts:\r\n");
      out.write("\t<pre>\r\n");
      out.write("\t<code>\r\n");
      out.write("\t[INFO] Preparing tomcat7:run\r\n");
      out.write("\t[DEBUG] (s) resources = [Resource {targetPath: null, filtering: false, \r\n");
      out.write("\t\tFileSet {directory: /workspace/webtest1/src/main/resources, \r\n");
      out.write("\t\tPatternSet [includes: {}, excludes: {}]}}]\r\n");
      out.write("\t...\r\n");
      out.write("\t[DEBUG] (f) additionalConfigFilesDir = /workspace/webtest1/src/main/tomcatconf\r\n");
      out.write("\t[DEBUG] (f) configurationDir = /workspace/webtest1/target/tomcat\r\n");
      out.write("\t...\r\n");
      out.write("\t[DEBUG] (f) path = /webtest1\r\n");
      out.write("\t...\r\n");
      out.write("\t[DEBUG] (f) port = 8080\r\n");
      out.write("\t[DEBUG] (f) project = ...:webtest1:0.0.1-SNAPSHOT @ /workspace/webtest1/pom.xml\r\n");
      out.write("\t...\r\n");
      out.write("\t[DEBUG] (f) warSourceDirectory = /workspace/webtest1/src/main/webapp\r\n");
      out.write("\t...\r\n");
      out.write("\t[INFO] Creating Tomcat server configuration at /workspace/webtest1/target/tomcat\r\n");
      out.write("\t...\r\n");
      out.write("\t[DEBUG] adding classPathElementFile file:/workspace/webtest1/target/classes/\r\n");
      out.write("\t[DEBUG] add dependency to webapploader org.slf4j:slf4j-api:1.5.6:compile\r\n");
      out.write("\t...\r\n");
      out.write("\t</code>\r\n");
      out.write("\t</pre>\r\n");
      out.write("\twarSourceDirectory points to src (not target), so it runs as an usual\r\n");
      out.write("\tdynamic web project, you could change your JSPs, HTMLs and it will\r\n");
      out.write("\tvisible immediately. Because of that the target/tomcat/webapps folder\r\n");
      out.write("\tis empty.\r\n");
      out.write("\t</br>\r\n");
      out.write("\t</br>\r\n");
      out.write("\t</br> How to Deploy or Run Application?:\r\n");
      out.write("\t</br> \r\n");
      out.write("\t<strong>Command to deploy application on existing running server.\r\n");
      out.write("\tThe server must be in running state on port 8080.\r\n");
      out.write("\t<mark>clean install tomcat7:deploy</mark></strong>\r\n");
      out.write("\t</br>\r\n");
      out.write("\t<strong>Command to run application directly on tomcat server:\r\n");
      out.write("\t<mark>-Dmaven.tomcat.port=9090 tomcat7:run</mark></strong>\r\n");
      out.write("\t</br>\r\n");
      out.write("\t</br> (\r\n");
      out.write("\t<kbd>Alt</kbd>\r\n");
      out.write("\t+\r\n");
      out.write("\t<kbd>Shift</kbd>\r\n");
      out.write("\t+\r\n");
      out.write("\t<kbd>X</kbd>\r\n");
      out.write("\t) , Then\r\n");
      out.write("\t<kbd>M</kbd>\r\n");
      out.write("\tto Run Maven Build.\r\n");
      out.write("\t</br>\r\n");
      out.write("\t</br>\r\n");
      out.write("\tSteps:\r\n");
      out.write("\t<ol>\r\n");
      out.write("\t\t<li>You will need to specify/save the Maven goals you want on Run -> Run\r\n");
      out.write("\tConfigurations</li>\r\n");
      out.write("\t\t<li>For every modification to project files you need to run the either of maven commands</li>\r\n");
      out.write("\t\t<li>Since the commands are saved just use shortcut Alt+Shift+X the M to Deploy/Run the application</li>\r\n");
      out.write("\t\t<li>Launch the application in browser</li>\r\n");
      out.write("\t\t<li>To bedug application you can use -X switch in maven command</li>\r\n");
      out.write("\t</ol>\r\n");
      out.write("\t</br>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
